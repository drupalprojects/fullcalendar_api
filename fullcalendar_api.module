<?php

/**
 * @file
 * Functions and hooks for FullCalendar API module.
 */

/**
 * Implements hook_menu().
 */
function fullcalendar_api_menu() {
  $items['fullcalendar-api/ajax/update/%/%'] = array(
    'title' => 'Update entity',
    'description' => 'Save the updated entity date.',
    'page callback' => 'fullcalendar_api_update',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Saves the updated FullCalendar event's datetime.
 */
function fullcalendar_api_update($action, $id) {
  if (empty($_REQUEST['id'])) {
    return;
  }

  // Retrieve and sanitize POST data.
  $id = check_plain($_REQUEST['id']);
  $title = check_plain($_REQUEST['title']);
  $entity_type = check_plain($_REQUEST['entityType']);
  $bundle = check_plain($_REQUEST['bundle']);
  $all_day = $_REQUEST['allDay'] ? TRUE : FALSE;
  $date_field = check_plain($_REQUEST['dateField']);
  $start_time = intval($_REQUEST['startTime']);
  $end_time = $_REQUEST['endTime'] ? intval($_REQUEST['endTime']) : NULL;

  $entity = entity_load_single($entity_type, $id);

  // Directly assign the date value instead of using entity metadata wrappers 
  // to support custom field type.
  // @todo this could be a lot more flexible
  $date_value = $entity->{$date_field}[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0];

  $format_string = DATE_FORMAT_DATETIME;
  switch ($date_value['date_type']) {
    case 'date':
      $format_string = DATE_FORMAT_ISO;
      break;
    case 'datestamp':
      $format_string = DATE_FORMAT_UNIX;
      break;
    case 'datetime':
    case 'ep_datetime':
      $format_string = DATE_FORMAT_DATETIME;
      break;
  }

  if ($date_value['date_type'] == 'ep_datetime') {
    $date_value['type'] = 'exact';
  }
  // Get date format and use php date() function.
  // @todo timezone?
  $date_value['value'] = date($format_string, $start_time);
  if (!empty($date_value['value2'])) {
    if (empty($end_time)) {
      $date_value['value2'] = $date_value['value'];
    }
    else {
      $date_value['value2'] = date($format_string, $end_time);
    }
  }

  $entity->{$date_field}[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0] = $date_value;

  // entity_save() will throw an error if it did not successfully save, 
  // which will prevent 'success' from being returned.
  $entity->save();
  drupal_json_output('success');
}

/**
 * Implements hook_theme().
 */
function fullcalendar_api_theme($existing, $type, $theme, $path) {
  return array(
    'fullcalendar_calendar' => array(
      'template' => 'fullcalendar',
      'variables' => array(
        'calendar_id' => NULL,
        'calendar_settings' => array(NULL),
      ),
    ),
    'fullcalendar_calendar_datasource' => array(
      'file' => 'theme.inc',
      'path' => "$path/theme",
      'variables' => array(
        'datasource_uri' => NULL,
        'calendar_id' => NULL,
        'calendar_settings' => array(NULL),
      ),
    ),
    'fullcalendar_calendar_entity' => array(
      'file' => 'theme.inc',
      'path' => "$path/theme",
      'variables' => array(
        'entities' => array(NULL),
        'date_field_map' => array(NULL),
        'calendar_id' => NULL,
        'calendar_settings' => array(NULL),
      ),
    ),
  );
}

/**
 * Prepares variables for fullcalendar_calendar.
 *
 * Default template: fullcalendar.html.twig.
 *
 * @params array $vars
 *   an associative array containing:
 *   - calendar_id: string the CSS id of the calendar DOM object
 *   - calendar_settings: array of settings to override FullCalendar.js defaults
 */
function template_preprocess_fullcalendar_calendar(&$vars) {
  $calendar_id = $vars['calendar_id'];
  $user_settings = $vars['calendar_settings'];

  // Default settings.
  $settings = array(  
    'header' => array(
      'left' => 'month,agendaWeek',
      'right' => 'prev title next',
    ),
    'defaultDate' => date('Y-m-d'),
    'businessHours' => TRUE,
    'editable' => TRUE,
    'events' => array(),
  );

  // Override defaults with user submitted data.
  $settings = array_replace_recursive($settings, $user_settings);

  // Have to make sure that html id and id in settings are identical.
  $calendar_id = \Drupal\Component\Utility\Html::getId($calendar_id);

  $vars['#attached']['library'][] = 'fullcalendar_api/fullcalendar_load';
  $vars['#attached']['drupalSettings']['fullcalendar_api']['instances'][$calendar_id] = $settings;
}
